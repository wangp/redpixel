<!doctype linuxdoc system>

<!-- Okay, so SGML/LinuxDoc is overkill for Red Pixel.
     But I wanted to learn it, so there. 
     Hey jed!  This is -*- SGML -*- -->

<article>



<!-- Title information -->

<title> Red Pixel: The Manual

<author> Peter Wang, <tt> tjaden@psynet.net </tt>

<date> Second edition for Red Pixel v0.11, June 2000
<!-- First edition for Red Pixel v0.9, August 1999 -->

<abstract>
This document is a brief manual for the game Red Pixel, adapted from
the original `redpixel.txt'.
</abstract>



<!-- Table of contents -->
<toc> 


<!-- Begin the document -->

<sect> Preliminary stuff


<sect1> Disclaimer

  <p> <verb>
#include <std_disclaimer.h>

   "I do not accept responsibility for any effects, adverse or otherwise, 
    that this code may have on you, your computer, your sanity, your dog, 
    and anything else that you can think of. Use it at your own risk."
  </verb>


<sect1> System Requirements

  <p> 
  
    <itemize>
      <item> two Pentium class machines
      <item> Linux, DOS or Windows
      <item> serial cable or LAN with sockets/winsock
      <item> 8 MB RAM
      <item> VGA-compliant card and monitor
      <item> mouse
      <item> tolerance for gore
      <item> headphones recommended
    </itemize>


<sect1> What's new?

  <p> New in 0.11:

    <itemize>
      <item> Linux port, and maps, by Peter Sundling (kaffepeter@telia.com)
      <item> <ref id="sec-demo" name="demo"> recording and playback
      <item> experimental <ref id="sec-sockets" name="sockets"> support
      <item> faster weapon stats
      <item> three maps by Mike 
      <item> mouse wheel support (Linux only)
      <item> keyboard control in menu
      <item> experimental Windows port (unstable)
      <item> CD playing (not built by default)
    </itemize>

  <p> New in 0.9:

    <itemize>
      <item> a lot more blood and sparks, and better particle generation
      <item> added <ref id="sec-items" name="scanner"> powerup
      <item> added new death sequence (fountain)
      <item> added cool backdrop for frag count
      <item> added <ref id="sec-cmdline" name="lcd cursor"> option
      <item> right mouse button now drops mine
      <item> Q/E and R/Y now select next/prev weapons
      <item> tweaked stats (see below)
      <item> configurable stats system
      <item> minor aesthetic and code-wise fixes
      <item> four new maps (castle, dome, sniper, mario)
      <item> changed licence to LGPL
      <item> this manual
    </itemize>



<!-- Next Section: The Game -->

<sect> The Game


<sect1> Concept

  <p> 

    The concept is a platform deathmatch game.  You run around a
    tile-based map, picking up various items and shooting your
    opponent.  Original.


<sect1> Story

  <p>

    You have been thrown in a dungeon with a handful of other
    prisoners. Contained within the dungeon are various magical
    objects, mostly weapons, which respawn after a certain time
    period.

    Surrounded by such weapons of destruction, you cannot resist the
    temptation to kill everyone around you.


<sect1> Compiling

  <p> 

    If you are planning to use a precompiled executable, you can skip
    this section.

    Firstly you need a working C compiler.  I use gcc under Linux
    (obviously), djgpp under DOS, and mingw32 under Windows.

    Then you need to install the Allegro game programming library (WIP
    3.9.32 or above).  If you want sockets support, you will also need to
    install Libnet.  If you want CD playing support, you will also need to
    install libcda.  (see below for URLs)

    From there you should be able to simply type `make' in the game's root
    directory.  If you don't have Libnet, type `make WITHOUT_LIBNET=1'.
    If you want CD playing supprt, add `WITH_LIBCDA=1' to the command
    line.  If you are compiling with mingw32, add `MINGW32=1'.

    Under Linux console you will need to run the binary with root
    permissions.  See `readme.lnx' in the Allegro distribution for
    more information.
    
  <sect2> Relevant links:
 
    <p> <itemize>
      <item> gcc: http://www.gnu.org/
      <item> djgpp: http://www.delorie.com/djgpp/
      <item> mingw32: http://www.mingw.org/
      <item> Allegro: http://www.talula.demon.co.uk/allegro/
      <item> Libnet: http://www.canvaslink.com/libnet/
      <item> libcda: http://www.psynet.net/tjaden/
    </itemize>


<sect1> Starting the game <label id="sec-starting">

  <p>

    Simply run the executable to start, optionally passing the
    following command line arguments.  Please note that they are case
    sensitive.

    <descrip> <label id="sec-cmdline">
      <tag/-e/ Start the <ref id="sec-mapeditor" name="map editor">.

      <tag/-l/ Use bright version of mouse cursor.  Designed 
	       to be used on hard to see laptop displays.
    
      <tag/-s/ Use alternative <ref id="sec-stats" name="stats"> for items.
    
      <tag/-q/ Skip introduction (quick!).
    
      <tag/-v/ Display version number.

      <tag/-d/ Enable <ref id="sec-demo" name="demo"> recording.
      
      <tag/-m/ Mute sound.

    </descrip>

    You can collate the options together, e.g. `red -qld'.


<sect1> Connecting via a serial cable

  <p>

    Link two computers via a serial cable and start the game.  Select
    Start --> Serial, and then the correct COM port.  Enter your name, then wait
    for the computers to connect.

    If an error occurs, check to make sure you used the right
    command line option.  If you're are running a DOS executable
    under Windows, try running under pure DOS.  (If you have a
    Logitech mouse you could also also try what I did, and get
    updated mouse drivers (MouseWare) for it from their web site.)

    From here on, you will be shown a map selection screen.  Only
    the maps existing on both computers will be displayed.  Please
    make sure the maps are identical, otherwise your games will be
    unsynchronised. Press the up and down arrow keys to select a
    map. When you are ready to play, press `F10'.

    If your game become unsynchronised, quit the level and restart.
    If it ever says ``SYNC PROBLEM'', then you'd better restart from
    the serial connection procedure.

    Note: serial connection is currently not implemented in the
    native Windows port.


<sect1> Connecting via Berkeley sockets or Winsock <label id="sec-sockets">

  <p> 
     
    Note: you must have compiled with Libnet support for this to work.

    One machine must select `Listen' while the one other selects
    `Connect'.  It works better if the listening machine starts first.
    The connecting machine will need to enter the IP address of the
    listening machine (e.g. 192.168.1.1).  DNS names are not
    supported.

    After connection, the game acts as it would with a serial connection.

    Note: as this driver simply emulates a perfect serial link via a
    network, you can still only play two player games.  Also, you need a
    fast connection between the machines, since the game still runs
    synchronously.


<sect1> Controls

  <p>

    <itemize>
    <item> Use the following keys to move around.  They are all equivalent.
    
      <tscreen> <verb>
          W	            T		       Up
      A - S - D       F - G - H		Left - Down - Right
      </verb> </tscreen>
    
    <item> Aim the gun with the mouse, fire with the left mouse button.
    
    <item> Select the weapon with the number keys, and with Q, E, R, Y.
     	   The weapons you have collected will be displayed on the left.
    
    <item> Press Enter or press the right mouse button to lay a mine.
    
    <item> If you have one and you are running under Linux or Windows, you can
    	   switch weapons using a mouse wheel on an Intellimouse
	   compatible mouse.  Please read `readme.lnx' in the
	   Allegro distribution to see how to set this up under
	   Linux.  Your mileage may vary, so don't be disappointed
	   if it doesn't work.

    <item> TAB to see your scores.  
    <item> ESC to quit.
    <item> F12 to see the frame rate counter. 

    </itemize>
    
    
<sect1> Items <label id="sec-items">
    
  <p>

    <itemize>
      <item> Weapons
      <itemize>
        <item> Knife
        <item> Pistol
        <item> Shotgun
        <item> Uzi
        <item> M16 (just a big gun, nothing like an M16)
        <item> Minigun
        <item> Bow with explosive arrows
        <item> Bazooka
        <item> Mines
      </itemize>
       
      <item> Other items:
      <itemize>
        <item> Chicken (+health)
        <item> Coke (+health)
        <item> Armour.  Takes half the damage from an attack (1 health = 2 armour)
        <item> Goggles.  Lights up your vision, for about a minute.
        <item> Backpack.  You drop half of all your ammo when you die,
               but your guns disappear.
        <item> Bloodlust.  Double damage for all weapons, except mines.  Be careful!
        <item> Scanner.  Points in the direction of your enemy.
      </itemize>
    </itemize>


<sect1> Stats <label id="sec-stats">

  <p> 

    Included with the game are three files `stats', `stats.07' and
    `stats.09'.  `stats' is the more up to date version, providing
    more powerful weapons with quicker reload and respawn rates.
    `stats.07' and `stats.09' provide values from older versions, kept
    only for historic reasons.

    You can create your own stats by copying one of them, and editing
    it with a text editor.

    Note that both machines will need exactly the same file, and both
    must run with the `-s' command-line option.  You have been warned.


<sect1> Demos <label id="sec-demo">

  <p> 

    You can record your deathmatches into demo files.  To do this,
    first start Red Pixel using the `-d' command-line option.

    When you start a new game, it will automatically save a demo into
    the current directory, named `demoXXXX.rec' or, if that is
    unwritable, into your home directory (if you don't know what I'm
    talking about, don't worry).

    To play a demo, simply choose the ``Play Demo'' menu item under
    ``Start''.

    Special keys available only in demo playback mode:

    <itemize>
      <item> Enter - switch which player camera focuses on
      <item> S - hold this down for slow motion mode
      <item> F - hold this down for fast forward mode
      <item> P - take screen shot
    </itemize>

    Please note that if you exit a demo before its completion, it will
    display the frag count as of the time you quit.

    If you record a cool demo, whether a demostration of a cool move
    in solo mode, or a nice, bloody deathmatch, please send it to me!

    If a demo does not play back properly, sent it to me for
    debugging.  I won't be able to save the demo, but it may help me
    track down bugs to prevent this sort of thing in the future.  If
    you really hate losing demos, try recording on both machines.


<sect1> Tips

  <p> 

    <itemize>
      <item> Use the 3D sound to find where your opponent is.  Also, eating
             food does not make a noise, but picking up things does.

      <item> After you pick up an item, place a mine there.  Works also for
             regenerating walls (will not flash).
    
      <item> The scanner is good for running away, as well as tracking down.
    
      <item> If are being mowed down with a minigun, run and drop mines!  The
    	     blood will conceal it :)
    
      <item> Jump over your enemy and lay mines.
    
      <item> Jump up ladders, never climb.
    </itemize>



<!-- Next Section: The Map Editor -->

<sect> The Map Editor <label id="sec-mapeditor">


<sect1> Map editor keys

  <p>

    After starting the map editor with `red -e' you will be
    presented with a blank screen.  On the bottom there is a palette
    and on the top there is a description of the current map, showing
    the top-left map coordinates and size.

    <itemize>
      <item> arrow keys to pan around
      <item> 1, 2, 3 to change editing modes (tiles, items, starting locations)
      <item> I, J, K, L to change map size
      <item> Ctrl-N to clear
      <item> Ctrl-S to save
      <item> Ctrl-L to load
      <item> Ctrl-Q to quit (warning: does not prompt!)
    </itemize>

    Select an item or tile with the left mouse button, place it on
    the map with the left mouse button.  Right mouse button clears.

    There is a set maximum of 24 starting locations on a single map.
    These appear as white flags (edit mode 3).


<sect1> Custom maps

  <p>

    If you wish to play your custom maps, make sure that you have
    exactly the same file on both machines!  And make sure you send
    them to me so I can put them up on my web page.

    For compatibility reasons, filenames MUST be all lowercase on
    case-sensitive operating systems (i.e. Linux), and everyone should
    stick to the DOS 8.3 filename limits.



<!-- Next Section: History -->

<sect> Game history

  <p> August 1999:

    I originally thought of the idea for this game about half a year
    before I developed it (Jan 1999).  At the time I was trying to write a
    top-down shooter called `Raid II' (dropped about 5 times!) so I
    delayed it, while my brother worked on the tiny little sprites.

    The development (starting June that year) took three months.
    The basic engine was working in a week, the rest of the time was
    used getting the serial connection to go, and to tweak things a
    little.  It has been a year since.

    Yesterday I fixed some really annoying bugs (see log.txt), and
    tweaked the stats to increase the frag counts.  Now I am writing
    this SGML manual to learn SGML.  It has been a successful project.

    But the code sucks. :-)
    
  <p> June 2000

    The code has been cleaned up a lot, so is better now.  It's
    still not worth a 1.0 though.  :-)


<sect1> Known Bugs

  <p>

    <itemize>
      <item> the blood particles drip through the walls.  This is too cool to fix!
      <item> the guy sometimes gets stuck inside a wall (often after explosion)
      <item> a ladder directly below a tile will allow the guy to pop up into the tile
      <item> you can jump through tiles placed diagonally
    </itemize>


<sect1> To do

  <p> Here are some things that I have not bothered to finish.

  <itemize>
    <item> proper networking (client-server, packet loss detection, etc.)
    <item> use a scripting language
    <item> 3 or more player support
  </itemize>

  Most of these probably will not see the light of day unless
  someone else does it.



<!-- Next Section: Licence -->

<sect> Licensing details

  <p> Red Pixel is licensed under the GNU Lesser General Public License
  which can be viewed in the file `COPYING' distributed with source code
  package or from http://www.gnu.org/.

  Brennan Underwood's `fastsqrt' routines (in the src/fastsqrt
  directory) do not fall under the LGPL.  (I don't know what licence it
  falls under, but it's free software of some sort.)

  The slightly modified random number generator `rg_rand.c' was taken
  from the Snippets collection, and remains in the public domain.

  `getopt.c' was taken from some mailing archive somewhere.  It
  retains its license and copyright.



<!-- Next Section: Contact -->

<sect> Contacting Psyk Software

<p> <tscreen> <verb>
Email: tjaden@psynet.net
WWW:   http://www.psynet.net/tjaden/
</verb> </tscreen>



</article>

